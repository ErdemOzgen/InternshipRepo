//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CalculatorWebService.CalculatorServiceRefence {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://services.calculator.com", ConfigurationName="CalculatorServiceRefence.Calculator")]
    public interface Calculator {
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="addReturn")]
        double add(double addCandidateFirstParam, double addCandidateSecondParam);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="addReturn")]
        System.Threading.Tasks.Task<double> addAsync(double addCandidateFirstParam, double addCandidateSecondParam);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="divideReturn")]
        double divide(double divideCandidateFirstParam, double divideCandidateSecondParam);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="divideReturn")]
        System.Threading.Tasks.Task<double> divideAsync(double divideCandidateFirstParam, double divideCandidateSecondParam);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="subtractReturn")]
        double subtract(double subtractCandidateFirstParam, double subtractCandidateSecondParam);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="subtractReturn")]
        System.Threading.Tasks.Task<double> subtractAsync(double subtractCandidateFirstParam, double subtractCandidateSecondParam);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="multiplyReturn")]
        double multiply(double multiplyCandidateFirstParam, double multiplyCandidateSecondParam);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="multiplyReturn")]
        System.Threading.Tasks.Task<double> multiplyAsync(double multiplyCandidateFirstParam, double multiplyCandidateSecondParam);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface CalculatorChannel : CalculatorWebService.CalculatorServiceRefence.Calculator, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalculatorClient : System.ServiceModel.ClientBase<CalculatorWebService.CalculatorServiceRefence.Calculator>, CalculatorWebService.CalculatorServiceRefence.Calculator {
        
        public CalculatorClient() {
        }
        
        public CalculatorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalculatorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double add(double addCandidateFirstParam, double addCandidateSecondParam) {
            return base.Channel.add(addCandidateFirstParam, addCandidateSecondParam);
        }
        
        public System.Threading.Tasks.Task<double> addAsync(double addCandidateFirstParam, double addCandidateSecondParam) {
            return base.Channel.addAsync(addCandidateFirstParam, addCandidateSecondParam);
        }
        
        public double divide(double divideCandidateFirstParam, double divideCandidateSecondParam) {
            return base.Channel.divide(divideCandidateFirstParam, divideCandidateSecondParam);
        }
        
        public System.Threading.Tasks.Task<double> divideAsync(double divideCandidateFirstParam, double divideCandidateSecondParam) {
            return base.Channel.divideAsync(divideCandidateFirstParam, divideCandidateSecondParam);
        }
        
        public double subtract(double subtractCandidateFirstParam, double subtractCandidateSecondParam) {
            return base.Channel.subtract(subtractCandidateFirstParam, subtractCandidateSecondParam);
        }
        
        public System.Threading.Tasks.Task<double> subtractAsync(double subtractCandidateFirstParam, double subtractCandidateSecondParam) {
            return base.Channel.subtractAsync(subtractCandidateFirstParam, subtractCandidateSecondParam);
        }
        
        public double multiply(double multiplyCandidateFirstParam, double multiplyCandidateSecondParam) {
            return base.Channel.multiply(multiplyCandidateFirstParam, multiplyCandidateSecondParam);
        }
        
        public System.Threading.Tasks.Task<double> multiplyAsync(double multiplyCandidateFirstParam, double multiplyCandidateSecondParam) {
            return base.Channel.multiplyAsync(multiplyCandidateFirstParam, multiplyCandidateSecondParam);
        }
    }
}
